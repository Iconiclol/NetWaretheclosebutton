using Photon.Pun;
using UnityEngine;

namespace NetWare
{
    public class Exploits : MonoBehaviour
    {
        public static void Execute()
        {
            // player
            if (!Config.GetBool("exploits.other.autoplay"))
            {
                LocalPlayer.GetHealth()?.SetPlayerImmunity(Config.GetBool("exploits.player.godmode"));
            }

            if (Config.GetBool("exploits.player.instantland"))
            {
                LocalPlayer.GetThirdPersonController()?.SetDiveState(false);
            }

            if (Config.GetBool("exploits.player.infinitematerials"))
            {
                Access.SetValue(
                    LocalPlayer.GetPlayerBuildingManager()?.buildingManager,
                    "BEEJBBBKOMC",
                    1000
                );
            }

            // other
            if (Config.GetBool("exploits.other.autoplay"))
            {
                // update timer
                autoPlayTimer++;

                // godmode
                LocalPlayer.GetHealth()?.SetPlayerImmunity(true);

                if (autoPlayTimer >= 2)
                {
                    // play again
                    FindObjectOfType<MatchResultScreen>()?.PlayAgainPressed();

                    // infinite ammo
                    WeaponsController weaponsController = LocalPlayer.GetWeaponsController();
                    weaponsController?.CKDFKAJOAGF?.SetCurrentAmmoAmount(999);
                    weaponsController?.CKDFKAJOAGF?.SetCurrentMagazineAmount(999);

                    if (autoPlayTimer >= 6)
                    {
                        // get target
                        PlayerController target = null;
                        foreach (PlayerController playerController in Storage.players)
                        {
                            if (!playerController.photonView.IsMine && Players.IsPlayerAlive(playerController) && Skeleton.HasSkeleton(playerController))
                            {
                                target = playerController;
                                break;
                            }
                        }

                        // check if target exists
                        if (target != null)
                        {
                            // teleport to target
                            LocalPlayer.Get().gameObject.transform.position = target.transform.position;

                            // aim at target
                            Camera.main.transform.LookAt(target.transform.position);

                            // shoot weapon (rapid fire)
                            weaponsController?.photonView?.RPC(
                                "FireWeaponRemote",
                                RpcTarget.All,
                                new object[] {
                                    null,
                                    true,
                                    1
                                }
                            );
                        }
                    }

                    // remove recoil
                    LocalPlayer.GetThirdPersonCamera()?.AddRecoil(Vector2.zero, 0, 0);
                }

                // reset timer
                if (autoPlayTimer >= 10)
                {
                    autoPlayTimer = 0;
                }
            }

            // world
            if (Config.GetBool("exploits.world.buildingspam") && Storage.players.Length > 0)
            {
                buildingSpammerTimer++;

                if (buildingSpammerTimer > 10)
                {
                    Network.BecomeMasterClient();

                    PlayerController playerController = Storage.players[Random.Range(0, Storage.players.Length)];

                    if (!playerController.photonView.IsMine && Players.IsPlayerAlive(playerController))
                    {
                        Vector3 buildingPosition = playerController.GLBFEGDMAPI;
                        Quaternion buildingRotation = Quaternion.Euler(
                            Random.Range(0, 360),
                            Random.Range(0, 360),
                            Random.Range(0, 360)
                        );

                        Network.GetBuildingNetworkController()?.CreateBuilding(NAMFCNDJBDF.Wall, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController()?.CreateBuilding(NAMFCNDJBDF.Floor, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController()?.CreateBuilding(NAMFCNDJBDF.Ramp, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController()?.CreateBuilding(NAMFCNDJBDF.Roof, buildingPosition, buildingRotation);
                    }

                    buildingSpammerTimer = 0;
                }
            }

            if (Config.GetBool("exploits.world.rigspam"))
            {
                rigSpamTimer++;

                if (rigSpamTimer > 10)
                {
                    PlayerController localPlayer = LocalPlayer.Get();

                    Vector3 position = Vector3.zero;
                    if (localPlayer != null)
                    {
                        position = localPlayer.gameObject.transform.position;
                    }

                    PhotonNetwork.Instantiate("PolyPlayer", position, Quaternion.identity, 0, null);

                    rigSpamTimer = 0;
                }
            }

            PlayerBuildingManager.IsOneHitBuildings = Config.GetBool("exploits.world.instantbreak");
        }

        public static void Tab()
        {
            Menu.Begin();

            Menu.NewSection("Player");
            Config.SetBool(
                "exploits.player.godmode",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.godmode"),
                    "Godmode"
                )
            );
            Config.SetBool(
                "exploits.player.instantland",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.instantland"),
                    "Instant Land"
                )
            );
            Config.SetBool(
                "exploits.player.infinitematerials",
                Menu.NewToggle(
                    Config.GetBool("exploits.player.infinitematerials"),
                    "Infinite Materials"
                )
            );

            Menu.NewSection("Other");
            Config.SetBool(
                "exploits.other.autoplay",
                Menu.NewToggle(
                    Config.GetBool("exploits.other.autoplay"),
                    "Auto Play"
                )
            );

            Menu.NewSection("Locker");
            Menu.NewButton("Unlock Emotes", UnlockEmotes);
            Menu.NewButton("Unlock Stickers", UnlockStickers);

            Menu.Separate();

            Menu.NewSection("World");
            Menu.NewButton("Freeze Players", FreezePlayers);
            Menu.NewButton("Destroy Buildings", DestroyBuildings);
            Menu.NewButton("Open Crates", OpenCrates);
            Config.SetBool(
                "exploits.world.buildingspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.buildingspam"),
                    "Building Spam"
                )
            );
            Config.SetBool(
                "exploits.world.rigspam",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.rigspam"),
                    "Rig Spam"
                )
            );
            Config.SetBool(
                "exploits.world.instantbreak",
                Menu.NewToggle(
                    Config.GetBool("exploits.world.instantbreak"),
                    "Instant Break"
                )
            );

            Menu.End();
        }

        // internal methods and variables
        private static int buildingSpammerTimer = 0;
        private static int autoPlayTimer = 0;
        private static int rigSpamTimer = 0;

        private static void UnlockEmotes()
        {
            ServerUser serverUser = FirebaseManager.ACMIJJJBFPF?.BPNHJECLOGK;

            if (serverUser != null)
            {
                for (int index = 1; index <= 50; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playeremotes.pack." + index);
                }
            }
        }
        private static void UnlockStickers()
        {
            ServerUser serverUser = FirebaseManager.ACMIJJJBFPF?.BPNHJECLOGK;

            if (serverUser != null)
            {
                for (int index = 1; index <= 80; index++)
                {
                    serverUser.Skins.OwnedEmotes.Add("lol.1v1.playerstickers.pack." + index);
                }
            }
        }

        private static void FreezePlayers()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!playerController.photonView.IsMine && Players.IsPlayerAlive(playerController))
                {
                    PhotonNetwork.DestroyPlayerObjects(playerController.photonView.Controller);
                }
            }
        }

        private static void DestroyBuildings()
        {
            Network.BecomeMasterClient();

            Network.GetBuildingNetworkController()?.KillAllBuildings(true);
        }

        private static void OpenCrates()
        {
            Network.BecomeMasterClient();

            PlayerController playerController = LocalPlayer.Get();

            if (playerController != null)
            {
                foreach (SupplyCrate supplyCrate in FindObjectsOfType<SupplyCrate>())
                {
                    supplyCrate.OpenCrate(playerController);
                }
            }
        }
    }
}
