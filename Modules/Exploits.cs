using Invector.CharacterController;
using Photon.Pun;
using UnityEngine;

namespace NetWare
{
    public class Exploits : MonoBehaviour
    {
        public static void Execute()
        {
            // player
            if (!Config.Exploits.Other.autoPlay)
            {
                LocalPlayer.GetLocalPlayerHealth().SetPlayerImmunity(Config.Exploits.Player.godmode);
            }

            if (Config.Exploits.Player.instantLand)
            {
                vThirdPersonController playerController = LocalPlayer.GetLocalPlayerThirdPersonController();

                if (playerController.IsDiving)
                {
                    playerController.SetDiveState(false);
                    playerController.SetGlideState(true);
                } else if (playerController.IsGliding)
                {
                    playerController.SetGlideState(false);
                }
            }

            // other
            if (Config.Exploits.Other.autoPlay)
            {
                // update timer
                autoPlayTimer++;

                // godmode
                LocalPlayer.GetLocalPlayerHealth().SetPlayerImmunity(true);

                if (autoPlayTimer >= 2)
                {
                    // play again
                    if (FindObjectOfType<MatchResultScreen>() != null)
                    {
                        FindObjectOfType<ResultScreenManager>().OnPlayAgainPressed();
                    }

                    if (autoPlayTimer >= 6)
                    {
                        // get target
                        PlayerController target = null;
                        foreach (PlayerController playerController in Storage.players)
                        {
                            if (!playerController.IsMine() && Players.IsPlayerAlive(playerController) && Skeleton.HasSkeleton(playerController))
                            {
                                target = playerController;
                                break;
                            }
                        }

                        // check if target exists
                        if (target != null)
                        {
                            // teleport to target
                            LocalPlayer.GetLocalPlayer().gameObject.transform.position = target.transform.position;

                            // aim at target
                            LocalPlayer.GetLocalPlayerMainCamera().transform.LookAt(target.transform.position);

                            // shoot weapon (rapid fire)
                            LocalPlayer.GetLocalPlayerWeaponsController().photonView.RPC(
                                "FireWeaponRemote",
                                RpcTarget.All,
                                new object[] {
                                    null,
                                    true,
                                    1
                                }
                            );
                        }
                    }

                    // infinite ammo
                    WeaponsController weaponsController = LocalPlayer.GetLocalPlayerWeaponsController();
                    weaponsController.PFPIKMMEICB.SetCurrentAmmoAmount(999);
                    weaponsController.PFPIKMMEICB.SetCurrentMagazineAmount(999);

                    // remove recoil
                    LocalPlayer.GetLocalPlayerThirdPersonCamera().AddRecoil(Vector2.zero, 0, 0);
                }

                // reset timer
                if (autoPlayTimer >= 10)
                {
                    autoPlayTimer = 0;
                }
            }

            // world
            if (Config.Exploits.World.buildingSpam)
            {
                buildingSpammerTimer++;

                if (buildingSpammerTimer > 10)
                {
                    Network.BecomeMasterClient();

                    PlayerController playerController = Storage.players[Random.Range(0, Storage.players.Length)];

                    if (!playerController.IsMine() && Players.IsPlayerAlive(playerController))
                    {
                        Vector3 buildingPosition = playerController.FGBLDFEONKO;
                        Quaternion buildingRotation = Quaternion.Euler(
                            Random.Range(0, 360),
                            Random.Range(0, 360),
                            Random.Range(0, 360)
                        );

                        Network.GetBuildingNetworkController().CreateBuilding(LDGEAILCHNI.Wall, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController().CreateBuilding(LDGEAILCHNI.Floor, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController().CreateBuilding(LDGEAILCHNI.Ramp, buildingPosition, buildingRotation);
                        Network.GetBuildingNetworkController().CreateBuilding(LDGEAILCHNI.Roof, buildingPosition, buildingRotation);
                    }

                    buildingSpammerTimer = 0;
                }
            }

            if (Config.Exploits.World.rigSpam)
            {
                rigSpamTimer++;

                if (rigSpamTimer > 10)
                {
                    PhotonNetwork.Instantiate("PolyPlayer", LocalPlayer.GetLocalPlayer().gameObject.transform.position, Quaternion.identity, 0, null);

                    rigSpamTimer = 0;
                }
            }
        }

        public static void Tab()
        {
            Menu.Begin();

            Menu.NewSection("Player");
            Config.Exploits.Player.godmode = Menu.NewToggle(Config.Exploits.Player.godmode, "Godmode");
            Config.Exploits.Player.instantLand = Menu.NewToggle(Config.Exploits.Player.instantLand, "Instant Land");

            Menu.NewSection("Other");
            Config.Exploits.Other.autoPlay = Menu.NewToggle(Config.Exploits.Other.autoPlay, "Auto Play");

            Menu.Separate();

            Menu.NewSection("World");
            Menu.NewButton("Freeze Players", FreezePlayers);
            Menu.NewButton("Destroy Buildings", DestroyBuildings);
            Menu.NewButton("Open Crates", OpenCrates);
            Config.Exploits.World.buildingSpam = Menu.NewToggle(Config.Exploits.World.buildingSpam, "Building Spam");
            Config.Exploits.World.rigSpam = Menu.NewToggle(Config.Exploits.World.rigSpam, "Rig Spam");

            Menu.End();
        }

        // internal methods and variables
        private static int buildingSpammerTimer = 0;
        private static int autoPlayTimer = 0;
        private static int rigSpamTimer = 0;

        private static void FreezePlayers()
        {
            Network.BecomeMasterClient();

            foreach (PlayerController playerController in Storage.players)
            {
                if (!playerController.IsMine() && Players.IsPlayerAlive(playerController))
                {
                    PhotonNetwork.DestroyPlayerObjects(playerController.photonView.Controller);
                }
            }
        }

        private static void DestroyBuildings()
        {
            Network.BecomeMasterClient();

            Network.GetBuildingNetworkController().photonView.RPC(
                "KillAllBuildingsRemote",
                RpcTarget.All,
                new object[] {
                    true
                }
            );
        }

        private static void OpenCrates()
        {
            Network.BecomeMasterClient();

            PlayerController playerController = LocalPlayer.GetLocalPlayer();

            foreach (SupplyCrate supplyCrate in FindObjectsOfType<SupplyCrate>())
            {
                supplyCrate.OpenCrate(playerController);
            }
        }
    }
}
